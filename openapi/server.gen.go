// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /items)
	GetItems(c *gin.Context)

	// (POST /items)
	CreateItem(c *gin.Context)

	// (DELETE /items/{itemId})
	DeleteItem(c *gin.Context, itemId int32)

	// (PUT /items/{itemId})
	UpdateItem(c *gin.Context, itemId int32)

	// (GET /records)
	GetRecordsByItem(c *gin.Context, params GetRecordsByItemParams)

	// (POST /records)
	CreateRecord(c *gin.Context)

	// (DELETE /records/{recordId})
	DeleteRecord(c *gin.Context, recordId int32)

	// (PUT /records/{recordId})
	UpdateRecord(c *gin.Context, recordId int32)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetItems operation middleware
func (siw *ServerInterfaceWrapper) GetItems(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetItems(c)
}

// CreateItem operation middleware
func (siw *ServerInterfaceWrapper) CreateItem(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateItem(c)
}

// DeleteItem operation middleware
func (siw *ServerInterfaceWrapper) DeleteItem(c *gin.Context) {

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int32

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", c.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteItem(c, itemId)
}

// UpdateItem operation middleware
func (siw *ServerInterfaceWrapper) UpdateItem(c *gin.Context) {

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int32

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", c.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateItem(c, itemId)
}

// GetRecordsByItem operation middleware
func (siw *ServerInterfaceWrapper) GetRecordsByItem(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecordsByItemParams

	// ------------- Required query parameter "itemId" -------------

	if paramValue := c.Query("itemId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument itemId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "itemId", c.Request.URL.Query(), &params.ItemId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRecordsByItem(c, params)
}

// CreateRecord operation middleware
func (siw *ServerInterfaceWrapper) CreateRecord(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRecord(c)
}

// DeleteRecord operation middleware
func (siw *ServerInterfaceWrapper) DeleteRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "recordId" -------------
	var recordId int32

	err = runtime.BindStyledParameterWithOptions("simple", "recordId", c.Param("recordId"), &recordId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recordId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRecord(c, recordId)
}

// UpdateRecord operation middleware
func (siw *ServerInterfaceWrapper) UpdateRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "recordId" -------------
	var recordId int32

	err = runtime.BindStyledParameterWithOptions("simple", "recordId", c.Param("recordId"), &recordId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recordId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateRecord(c, recordId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/items", wrapper.GetItems)
	router.POST(options.BaseURL+"/items", wrapper.CreateItem)
	router.DELETE(options.BaseURL+"/items/:itemId", wrapper.DeleteItem)
	router.PUT(options.BaseURL+"/items/:itemId", wrapper.UpdateItem)
	router.GET(options.BaseURL+"/records", wrapper.GetRecordsByItem)
	router.POST(options.BaseURL+"/records", wrapper.CreateRecord)
	router.DELETE(options.BaseURL+"/records/:recordId", wrapper.DeleteRecord)
	router.PUT(options.BaseURL+"/records/:recordId", wrapper.UpdateRecord)
}

type GetItemsRequestObject struct {
}

type GetItemsResponseObject interface {
	VisitGetItemsResponse(w http.ResponseWriter) error
}

type GetItems200JSONResponse []Item

func (response GetItems200JSONResponse) VisitGetItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetItems4XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetItems4XXJSONResponse) VisitGetItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetItems5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetItems5XXJSONResponse) VisitGetItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateItemRequestObject struct {
	Body *CreateItemJSONRequestBody
}

type CreateItemResponseObject interface {
	VisitCreateItemResponse(w http.ResponseWriter) error
}

type CreateItem201JSONResponse Item

func (response CreateItem201JSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateItem4XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateItem4XXJSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateItem5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateItem5XXJSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteItemRequestObject struct {
	ItemId int32 `json:"itemId"`
}

type DeleteItemResponseObject interface {
	VisitDeleteItemResponse(w http.ResponseWriter) error
}

type DeleteItem204Response struct {
}

func (response DeleteItem204Response) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteItem4XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteItem4XXJSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteItem5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteItem5XXJSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateItemRequestObject struct {
	ItemId int32 `json:"itemId"`
	Body   *UpdateItemJSONRequestBody
}

type UpdateItemResponseObject interface {
	VisitUpdateItemResponse(w http.ResponseWriter) error
}

type UpdateItem200JSONResponse Item

func (response UpdateItem200JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItem4XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateItem4XXJSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateItem5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateItem5XXJSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRecordsByItemRequestObject struct {
	Params GetRecordsByItemParams
}

type GetRecordsByItemResponseObject interface {
	VisitGetRecordsByItemResponse(w http.ResponseWriter) error
}

type GetRecordsByItem200JSONResponse struct {
	Id      *int32    `json:"id,omitempty"`
	Name    *string   `json:"name,omitempty"`
	Records *[]Record `json:"records,omitempty"`
}

func (response GetRecordsByItem200JSONResponse) VisitGetRecordsByItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecordsByItem4XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRecordsByItem4XXJSONResponse) VisitGetRecordsByItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRecordsByItem5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRecordsByItem5XXJSONResponse) VisitGetRecordsByItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateRecordRequestObject struct {
	Body *CreateRecordJSONRequestBody
}

type CreateRecordResponseObject interface {
	VisitCreateRecordResponse(w http.ResponseWriter) error
}

type CreateRecord201JSONResponse Record

func (response CreateRecord201JSONResponse) VisitCreateRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateRecord4XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateRecord4XXJSONResponse) VisitCreateRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateRecord5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateRecord5XXJSONResponse) VisitCreateRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteRecordRequestObject struct {
	RecordId int32 `json:"recordId"`
}

type DeleteRecordResponseObject interface {
	VisitDeleteRecordResponse(w http.ResponseWriter) error
}

type DeleteRecord204Response struct {
}

func (response DeleteRecord204Response) VisitDeleteRecordResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteRecord4XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteRecord4XXJSONResponse) VisitDeleteRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteRecord5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteRecord5XXJSONResponse) VisitDeleteRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateRecordRequestObject struct {
	RecordId int32 `json:"recordId"`
	Body     *UpdateRecordJSONRequestBody
}

type UpdateRecordResponseObject interface {
	VisitUpdateRecordResponse(w http.ResponseWriter) error
}

type UpdateRecord200JSONResponse Record

func (response UpdateRecord200JSONResponse) VisitUpdateRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRecord4XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateRecord4XXJSONResponse) VisitUpdateRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateRecord5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateRecord5XXJSONResponse) VisitUpdateRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /items)
	GetItems(ctx context.Context, request GetItemsRequestObject) (GetItemsResponseObject, error)

	// (POST /items)
	CreateItem(ctx context.Context, request CreateItemRequestObject) (CreateItemResponseObject, error)

	// (DELETE /items/{itemId})
	DeleteItem(ctx context.Context, request DeleteItemRequestObject) (DeleteItemResponseObject, error)

	// (PUT /items/{itemId})
	UpdateItem(ctx context.Context, request UpdateItemRequestObject) (UpdateItemResponseObject, error)

	// (GET /records)
	GetRecordsByItem(ctx context.Context, request GetRecordsByItemRequestObject) (GetRecordsByItemResponseObject, error)

	// (POST /records)
	CreateRecord(ctx context.Context, request CreateRecordRequestObject) (CreateRecordResponseObject, error)

	// (DELETE /records/{recordId})
	DeleteRecord(ctx context.Context, request DeleteRecordRequestObject) (DeleteRecordResponseObject, error)

	// (PUT /records/{recordId})
	UpdateRecord(ctx context.Context, request UpdateRecordRequestObject) (UpdateRecordResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetItems operation middleware
func (sh *strictHandler) GetItems(ctx *gin.Context) {
	var request GetItemsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetItems(ctx, request.(GetItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetItemsResponseObject); ok {
		if err := validResponse.VisitGetItemsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateItem operation middleware
func (sh *strictHandler) CreateItem(ctx *gin.Context) {
	var request CreateItemRequestObject

	var body CreateItemJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateItem(ctx, request.(CreateItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateItemResponseObject); ok {
		if err := validResponse.VisitCreateItemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteItem operation middleware
func (sh *strictHandler) DeleteItem(ctx *gin.Context, itemId int32) {
	var request DeleteItemRequestObject

	request.ItemId = itemId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteItem(ctx, request.(DeleteItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteItemResponseObject); ok {
		if err := validResponse.VisitDeleteItemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateItem operation middleware
func (sh *strictHandler) UpdateItem(ctx *gin.Context, itemId int32) {
	var request UpdateItemRequestObject

	request.ItemId = itemId

	var body UpdateItemJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateItem(ctx, request.(UpdateItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateItemResponseObject); ok {
		if err := validResponse.VisitUpdateItemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRecordsByItem operation middleware
func (sh *strictHandler) GetRecordsByItem(ctx *gin.Context, params GetRecordsByItemParams) {
	var request GetRecordsByItemRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecordsByItem(ctx, request.(GetRecordsByItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecordsByItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRecordsByItemResponseObject); ok {
		if err := validResponse.VisitGetRecordsByItemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateRecord operation middleware
func (sh *strictHandler) CreateRecord(ctx *gin.Context) {
	var request CreateRecordRequestObject

	var body CreateRecordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRecord(ctx, request.(CreateRecordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRecord")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateRecordResponseObject); ok {
		if err := validResponse.VisitCreateRecordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRecord operation middleware
func (sh *strictHandler) DeleteRecord(ctx *gin.Context, recordId int32) {
	var request DeleteRecordRequestObject

	request.RecordId = recordId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRecord(ctx, request.(DeleteRecordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRecord")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteRecordResponseObject); ok {
		if err := validResponse.VisitDeleteRecordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateRecord operation middleware
func (sh *strictHandler) UpdateRecord(ctx *gin.Context, recordId int32) {
	var request UpdateRecordRequestObject

	request.RecordId = recordId

	var body UpdateRecordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRecord(ctx, request.(UpdateRecordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRecord")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateRecordResponseObject); ok {
		if err := validResponse.VisitUpdateRecordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWT2vcPhD9KmZ+v6NYO3968S1pS1koPRRaAiEHxZ54FWxJkcYtZvF3L5LszTY23l22",
	"2dD6tMKSZt7MPL19a8hUpZVESRbSNdhshRX3y4/GKOMW2iiNhgT6zxVaywt0S2o0QgqWjJAFtC0Dg0+1",
	"MJhDers5eMf6g+r+ETOClsGSsBqGzgxywvyKRoIzELn7/KBMxQlSEJIuzmETW0jCAo07KHm1BzyRQ3eU",
	"bSUeA/sVM2XyIdxjATH4wcv6QKjhyhCmuyPkg/LRBJVu7zuvS3J30FihJKRwtkgWicusNEquBaRwsUgW",
	"l8BAc1r5smJBWPlVgX4SrmZOQsllDil8Qlr6Aw6j1Ura0I3zJPEzVJJQ+ntc61Jk/mb8aF3+nl++e32W",
	"/w0+QAr/xc9MjDsaxp4n7aZYbgxvQq052swITaGuq7KMfMDoHkslCyGLiFTEo9qGEVze3ByEbgpUeBgj",
	"KLoNBu9OmM1taGVHJvXes9q3MPAJLV2rvDkI2u+U75lcCfkZZUErSM/YDvb6O+OEfT5GpsZ2wKizP9bF",
	"QKRhE7/gz7KJuvfvKfSvs6Vl3QuP1+5nmbcuZo4lEg459MF/7zikueEVEhoL6e0ahIvrZKNXpxRCRHg5",
	"WbaFfqdetncDHlwGiNv1BGDzGBkDXY+87286528ym79QSZJXV5IwjfloiPGuaNInBONkr5sJjj7VaJpX",
	"F5DkCKYeb/O2WrWX6+kM59D3jFJ/6IS6fC+8kJyLVk6Yoa6zJxWxLZt/sNhN+/3T2aeekbsMlNkwdyby",
	"F6/DYi8btWHf7j/rPuoprdQ8hjdppt5oQjPQouQEWtRbsJmoUNv+CgAA//8QxJpivhMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
